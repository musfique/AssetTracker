@model AssetTracker.Core.Models.ViewModel.AssetPurchaseCreateViewModel

@{
    ViewBag.Title = "Create";
}

<div class="container">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        <div class="form-horizontal">
            <div class="panel panel-primary">
                <div class="panel-heading">Create Asset Purchase</div>
                <div class="panel-body">
                    <div class="form-horizontal">

                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="row col-md-12">
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.OrganizationID, htmlAttributes: new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.DropDownListFor(model => model.OrganizationID, Model.OrganizationsSelectList, "Select a Organization", new { @class = "form-control text-box-border-color" })
                                    @Html.ValidationMessageFor(model => model.OrganizationID, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.OrganizationBranchID, htmlAttributes: new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.DropDownListFor(model => model.OrganizationBranchID, Model.OrganizationBranchesSelectList, "Select a Organization Branch", new { @class = "form-control text-box-border-color" })
                                    @Html.ValidationMessageFor(model => model.OrganizationBranchID, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="row col-md-12">

                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.PurchasedBy, htmlAttributes: new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.EditorFor(model => model.PurchasedBy, new { htmlAttributes = new { @class = "form-control text-box-border-color" } })
                                    @Html.ValidationMessageFor(model => model.PurchasedBy, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.PurchasedDate, htmlAttributes: new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.TextBoxFor(model => model.PurchasedDate, new { @class = "form-control text-box-border-color", @Type = "Date" })
                                    @Html.ValidationMessageFor(model => model.PurchasedDate, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="row col-md-12">
                            <div class="form-group col-md-6">
                                @Html.LabelFor(model => model.VendorID, htmlAttributes: new { @class = "control-label col-md-4" })
                                <div class="col-md-8">
                                    @Html.DropDownListFor(model => model.VendorID, Model.VendorsSelectList, "Select a Vendor", new { @class = "form-control text-box-border-color" })
                                    @Html.ValidationMessageFor(model => model.VendorID, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                       <div class="panel panel-primary">
                            <div class="panel-heading">Asset Purchase Details</div>
                            <div class="panel-body">
                                <div class="alert alert alert-danger alert-dismissible fade in" role="alert" id="errorMsg" style="display: none">
                                    <strong>Sorry! </strong> This Asset Already Added.
                                </div>
                                <div class="alert alert alert-success alert-dismissible fade in" role="alert" id="successMsg" style="display: none">
                                    <strong>Added! </strong> Asset Added Successfully!
                                </div>
                                <div class="alert alert alert-danger alert-dismissible fade in" role="alert" id="errorMsgForForm" style="display: none">
                                    <strong>Sorry! </strong> Asset Details Field Can't Be Empty !! !!
                                </div>

                                <div>
                                    <div class="col-md-12">
                                        <div class="col-md-6">
                                            <div class="col-md-12 row">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.GeneralCategoryID, htmlAttributes: new { @class = "control-label col-md-4" })
                                                    <div class="col-md-8">
                                                        @Html.DropDownListFor(model => model.GeneralCategoryID, Model.GeneralCategoriesSelectList, "Select a General Category", new { @class = "form-control text-box-border-color" })
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-12 row">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.CategoryID, htmlAttributes: new { @class = "control-label col-md-4" })
                                                    <div class="col-md-8">
                                                        @Html.DropDownListFor(model => model.CategoryID, Model.CategoriesSelectList, "Select a Category", new { @class = "form-control text-box-border-color" })

                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-12 row">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.SubCategoryID, htmlAttributes: new { @class = "control-label col-md-4" })
                                                    <div class="col-md-8">
                                                        @Html.DropDownListFor(model => model.SubCategoryID, Model.SubCategoriesSelectList, "Select a Sub Category", new { @class = "form-control text-box-border-color" })

                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-12 row">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.DetailCategoryID, htmlAttributes: new { @class = "control-label col-md-4" })
                                                    <div class="col-md-8">
                                                        @Html.DropDownListFor(model => model.DetailCategoryID, Model.DetailCategoriesSelectList, "Select a Detail Category", new { @class = "form-control text-box-border-color" })

                                                    </div>
                                                </div>
                                            </div>

                                            <div class="col-md-12 row">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-4" })
                                                    <div class="col-md-8">
                                                        @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control text-box-border-color" } })
                                                        @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>

                                        </div>

                                        <div class="col-md-6">

                                            <div class="col-md-12 row">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.Quantity, htmlAttributes: new { @class = "control-label col-md-4" })
                                                    <div class="col-md-8">
                                                        @Html.EditorFor(model => model.Quantity, new { htmlAttributes = new { @class = "form-control text-box-border-color" } })
                                                        @Html.ValidationMessageFor(model => model.Quantity, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="col-md-12 row">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.HasWarranty, htmlAttributes: new { @class = "control-label col-md-4" })
                                                    <div class="col-md-8">
                                                        @Html.EditorFor(model => model.HasWarranty, new { @class = "form-control text-box-border-color" })
                                                        @Html.ValidationMessageFor(model => model.HasWarranty, "", new { @class = "text-danger" })
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-12 row">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.WarrantyPeriodUnitID, htmlAttributes: new { @class = "control-label col-md-4" })
                                                    <div class="col-md-8">
                                                        @Html.DropDownListFor(model => model.WarrantyPeriodUnitID, Model.WarrantyPeriodUnitsSelectList, "Select a Warranty Period Unit", new { @class = "form-control text-box-border-color", @disabled = true })

                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-12 row">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.WarrantyPeriod, htmlAttributes: new {@class = "control-label col-md-4"})
                                                    <div class="col-md-8">
                                                        @Html.EditorFor(model => model.WarrantyPeriod, new { htmlAttributes = new { @class = "form-control text-box-border-color", @readonly = true } })
                                                        @Html.ValidationMessageFor(model => model.WarrantyPeriod, "", new {@class = "text-danger"})
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-12 row">
                                                <div class="form-actions" align="right">
                                                    <input type="button" id="addItemButton" value="Add" class="btn btn-success saveOrcancel" />
                                                    <input type="button" id="cancelButton" value="Cancel" class="btn btn-danger saveOrcancel" />
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                              
                                <div class="table-responsive">
                                    <table class="table table-striped table-bordered table-hover">
                                        <thead style="background-color: skyblue">
                                            <tr style="color: white">
                                                <th>
                                                    SL
                                                </th>

                                                <th>
                                                    Gen Category
                                                </th>
                                                <th>
                                                    Category
                                                </th>
                                                <th>
                                                    Sub Category
                                                </th>
                                                <th>
                                                    Detail Category
                                                </th>
                                                <th>
                                                    Warranty Period
                                                </th>
                                                <th>
                                                    Quantity
                                                </th>
                                                <th>
                                                    Price
                                                </th>
                                                <th>
                                                    Total
                                                </th>
                                                <th style="width: 75px">
                                                    Action
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody id="itemsListTable"></tbody>
                                    </table>
                                </div>

                            </div>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Create" class="btn btn-success" />
                            <input type="button" value="Cancel" class="btn btn-danger" onclick="location.href = '@Url.Action("Index", "Home")'" />
                            <input type="button" value="View All" class="btn btn-info" onclick="location.href = '@Url.Action("Index", "AssetPurchase")'" />
                        </div>
                    </div>
                </div>
            </div>
        </div>


    }
</div>

@section Scripts {
    <script>
        var itemList = [];
        $(document).ready(function () {
            var $organization = $("#OrganizationID");
            var $organizationBranch = $("#OrganizationBranchID");

            var $generalCategory = $("#GeneralCategoryID");
            var $category = $("#CategoryID");
            var $subCategory = $("#SubCategoryID");
            var $detailCategory = $("#DetailCategoryID");
            //var $detailCategoryCode = $("#DetailCategoryCode");
            var $price = $("#Price");
            var $quantity = $("#Quantity");
            var $hasWarranty = $("#HasWarranty");
            var $warrantyPeriodUnit = $("#WarrantyPeriodUnitID");
            var $warrantyPeriod = $("#WarrantyPeriod");




            var categoryDefaultOption = "<option value=''>Select a Category</option>";
            var subCategoryDefaultOption = "<option value=''>Select a Sub Category</option>";
            var detailCategoryDefaultOption = "<option value=''>Select a Detail Category</option>";
            //var subCategoryDefaultOption = "<option value=''>Select a Sub Category</option>";
            var generalCategoryId, categoryId, subCategoryId, detailCategoryId, priceValue, quantityValue, hasWarrantyValue, warrantyPeriodUnitId, warrantyPeriodValue, hasWarrantyChecked = false;

            $organization.change(function () {
                var organizationId = $organization.val();
                if (organizationId !== "") {
                    $.ajax({
                        url: "/OrganizationBranch/GetOrganizationBranches",
                        data: { id: organizationId },
                        method: "POST",
                        success: function (result) {
                            //console.log(result);
                            var options = "<option value=''>Select a Organization Branch</option>";
                            for (var i = 0; i < result.length; i++) {
                                options = options + "<option value='" + result[i]['OrganizationBranchID'] + "'>" + result[i]['OrganizationBranchName'] + "</option>";
                            }
                            $organizationBranch.empty().append(options);
                        }


                    });
                } else {
                    var options = "<option value=''>Select a Organization Branch</option>";
                    $organizationBranch.empty().append(options);
                }

            });

            $generalCategory.change(function () {
                generalCategoryId = parseInt($generalCategory.val());
                if (generalCategoryId > 0) {
                    getAllCategories();
                    $subCategory.empty().append(subCategoryDefaultOption);
                } else {
                    ClearCategorySubCategoryDetailCategoryDropdown();
                }
            });

            function ClearCategorySubCategoryDetailCategoryDropdown() {
                $category.empty().append(categoryDefaultOption);
                $subCategory.empty().append(subCategoryDefaultOption);
                $detailCategory.empty().append(detailCategoryDefaultOption);
            }

            function getAllCategories() {
                $.ajax({
                    url: "/Category/GetAllByGeneralCategoryId",
                    data: { generalCategoryId: generalCategoryId },
                    method: "POST",
                    success: function (result) {
                        var option = categoryDefaultOption;
                        for (var i = 0; i < result.length; i++) {
                            option = option + "<option value='" + result[i]['CategoryID'] + "'>" + result[i]['CategoryName'] + "</option>";
                        }
                        $category.empty().append(option);
                    }
                });
            }

            $category.change(function () {
                categoryId = parseInt($category.val());
                if (categoryId > 0) {
                    getAllSubCategories();
                } else {
                    $subCategory.empty().append(subCategoryDefaultOption);
                    $detailCategory.empty().append(detailCategoryDefaultOption);

                }
            });
            function getAllSubCategories() {
                $.ajax({
                    url: "/SubCategory/GetAllByCategoryId",
                    data: { categoryId: categoryId },
                    method: "POST",
                    success: function (result) {
                        var option = subCategoryDefaultOption;
                        for (var i = 0; i < result.length; i++) {
                            option = option + "<option value='" + result[i]['SubCategoryID'] + "'>" + result[i]['SubCategoryName'] + "</option>";
                        }
                        $subCategory.empty().append(option);
                    }
                });
            }
            $subCategory.change(function () {
                subCategoryId = parseInt($subCategory.val());
                if (subCategoryId > 0) {
                    getAllDetailCategories();
                } else {
                    $detailCategory.empty().append(detailCategoryDefaultOption);
                }
            });

            function getAllDetailCategories() {
                $.ajax({
                    url: "/DetailCategory/GetAllBySubCategoryId",
                    data: { subCategoryId: subCategoryId },
                    method: "POST",
                    success: function (result) {
                        var option = detailCategoryDefaultOption;
                        for (var i = 0; i < result.length; i++) {
                            option = option + "<option value='" + result[i]['DetailCategoryID'] + "'>" + result[i]['DetailCategoryName'] + "</option>";
                        }
                        $detailCategory.empty().append(option);
                    }
                });
            }

            $hasWarranty.change(function () {
                hasWarrantyChecked = $hasWarranty.is(":checked");
                if (hasWarrantyChecked) {
                    $warrantyPeriodUnit.prop("disabled", false);
                    $warrantyPeriod.prop("readonly", false);
                } else {
                    ClearWarrantyPeriod();
                }
            });

            function ClearWarrantyPeriod() {
                $warrantyPeriodUnit.prop("disabled", true);
                $warrantyPeriod.prop("readonly", true);
                $warrantyPeriodUnit.val('');
                $warrantyPeriod.val('');
            }
            $("#addItemButton").click(function () {
                detailCategoryId = $detailCategory.val();
                priceValue = parseFloat($price.val());
                quantityValue = parseFloat($quantity.val());
                hasWarrantyValue = $hasWarranty.val();
                warrantyPeriodUnitId = $warrantyPeriodUnit.val();
                warrantyPeriodValue = parseFloat($warrantyPeriod.val());


                if (detailCategoryId > 0 && priceValue !== "" && quantityValue !== "" && ((hasWarrantyChecked && warrantyPeriodUnitId > 0 && warrantyPeriodValue) || !hasWarrantyChecked)) {
                    addRowForItem();
                } else {
                    $("#errorMsgForForm").fadeTo(2000, 500).slideUp(500);
                   return false;
                }

                //return false;

            });
            function addRowForItem() {

                var index = $("#itemsListTable").children("tr").length;
                var selectedItem = getSelectedtItem();

                var selectedItemId = categoryId;

                if (selectedItemId != null) {
                    var isAdded = $.inArray(selectedItemId, itemList) > -1 ? true : false;
                    if (isAdded) {
                        $("#errorMsg").fadeTo(2000, 500).slideUp(500);
                        $("#successMsg").hide();
                        return;
                    } else {
                        itemList.push(selectedItemId);

                        $("#errorMsg").hide();
                        $("#successMsg").fadeTo(2000, 500).slideUp(500);

                    }
                }

                var indexCell = "<td style='display:none'><input name='AssetPurchaseDetails.Index' type='hidden' value='" + index + "' /></td>";
                var serialCell = "<td><label id='AssetDetails" + index + "_Serial' value='" + (index + 1) + "' />" + (index + 1) + "</td>";
                var genCategoryCell = "<td><input type='hidden' id='AssetDetails" + index + "GeneralCategory' name='AssetPurchaseDetails[" + index + "].GeneralCategoryID' value='" + selectedItem.GenralCategoryID + "' />" + selectedItem.GenralCategory + "</td>";
                var categoryCell = "<td><input type='hidden' id='AssetDetails" + index + "Category' name='AssetPurchaseDetails[" + index + "].CategoryID' value='" + selectedItem.CategoryID + "' />" + selectedItem.Category + "</td>";
                var subCeneralCell = "<td><input type='hidden' id='AssetDetails" + index + "SubCategory' name='AssetPurchaseDetails[" + index + "].SubCategoryID' value='" + selectedItem.SubCategoryID + "' />" + selectedItem.SubCategory + "</td>";
                var detailCategoryCell = "<td><input type='hidden' id='AssetDetails" + index + "DetailCategory' name='AssetPurchaseDetails[" + index + "].DetailCategoryID' value='" + selectedItem.DetailCategoryID + "' />" + selectedItem.DetailCategory + "</td>";
                var warrantyMsg;
                if (hasWarrantyChecked) {
                    warrantyMsg = selectedItem.WarrantyPeriod + "(" + selectedItem.WarrantyPeriodUnit + ")";
                } else {
                    warrantyMsg = "N/A";
                }
                var warrantyPeriod = "<td><input type='hidden' id='AssetDetails" + index + "_WarrantyPeriod' name='AssetPurchaseDetails[" + index + "].WarrantyPeriod' value='" + selectedItem.WarrantyPeriod + "' />" +
                    "<input type='hidden' id='AssetDetails" + index + "_WarrantyPeriodUnit' name='AssetPurchaseDetails[" + index + "].WarrantyPeriodUnitID' value='" + selectedItem.WarrantyPeriodUnitID + "' />"
                    + warrantyMsg + "</td>";
                var quantity = "<td><input type='hidden' id='AssetDetails" + index + "DetailCategory' name='AssetPurchaseDetails[" + index + "].Quantity' value='" + selectedItem.Quantity + "' />" + selectedItem.Quantity + "</td>";
                var price = "<td><input type='hidden' id='AssetDetails" + index + "DetailCategory' name='AssetPurchaseDetails[" + index + "].UnitPrice' value='" + selectedItem.Price + "' />" + selectedItem.Price + "</td>";
                var total = "<td>" + selectedItem.Price * selectedItem.Quantity + "</td>";


                var editCell = "<td><input id='btnEditItem' class='btn btn-xs btn-success btn-rounded' type='button' value='Edit' onclick='editRowForItem(" + index + ");'/>";
                var removeCell = "<input id='btnRemoveItem' class='btn btn-xs btn-danger btn-rounded' type='button' value='Remove' onclick='removeRowForItem(" + index + ");' /></td>";
                var newRow = "<tr id='trItems" + index + "'>" +
                    indexCell + serialCell + genCategoryCell + categoryCell + subCeneralCell + detailCategoryCell + warrantyPeriod + quantity + price + total + editCell + removeCell + "</tr>";
                $("#itemsListTable").append(newRow);
                ClearDetail();

            }

            function ClearDetail() {
                $generalCategory.val('');
                ClearCategorySubCategoryDetailCategoryDropdown();
                $price.val('');
                $quantity.val('');
                ClearWarrantyPeriod();
            }
            function getSelectedtItem() {
                detailCategoryId = $detailCategory.val();
                priceValue = $price.val();
                quantityValue = $quantity.val();
                hasWarrantyValue = $hasWarranty.val();
                warrantyPeriodUnitId = $warrantyPeriodUnit.val();
                warrantyPeriodValue = $warrantyPeriod.val();
                var itemObj = {
                    "GenralCategoryID": generalCategoryId,
                    "GenralCategory": $("#GeneralCategoryID option:selected").text(),
                    "SubCategoryID": subCategoryId,
                    "SubCategory": $("#SubCategoryID option:selected").text(),
                    "CategoryID": categoryId,
                    "Category": $("#CategoryID option:selected").text(),
                    "DetailCategoryID": detailCategoryId,
                    "DetailCategory": $("#DetailCategoryID option:selected").text(),
                    "Price": priceValue,
                    "Quantity": quantityValue,
                    "HasWarranty": hasWarrantyValue,
                    "WarrantyPeriodUnitID": $warrantyPeriodUnit.val(),
                    "WarrantyPeriodUnit": $("#WarrantyPeriodUnitID option:selected").text(),
                    "WarrantyPeriod": warrantyPeriodValue
                }
                return itemObj;
            }
            
        });

        function removeRowForItem(id)
        {
            var controlToBeRemoved = "#trItems" + id;
            itemList.pop(id);
            $(controlToBeRemoved).remove();
        }

        function editRowForItem(id)
        {
            var controlToBeEdited = "#trItems" + id;

            var editable = $(controlToBeEdited);
        }

    </script>
}
